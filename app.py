import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import re
import os
from matplotlib.colors import LinearSegmentedColormap
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.patches as mpatches
import networkx as nx
import random
from collections import Counter

# Configura√ß√µes para os gr√°ficos
plt.rcParams['axes.formatter.use_locale'] = True
plt.rcParams['figure.figsize'] = (12, 8)
sns.set(style="whitegrid")
plt.style.use('ggplot')

# Tentar configurar o locale
try:
    import locale
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_ALL, 'Portuguese_Brazil.1252')
    except:
        print("Aviso: N√£o foi poss√≠vel configurar o locale para pt_BR. Usando locale padr√£o.")

print('üîç PROJETO SOCIALDVIE DIGITAL - AN√ÅLISE DE IMPACTO SOCIAL DAS REDES SOCIAIS')
print("Inspirado no epis√≥dio 'SocialDive' de Black Mirror")
print("=" * 70)

# Dados dos artigos fornecidos
print("\nüìö AN√ÅLISE DE ARTIGOS SOBRE IMPACTO SOCIAL DAS REDES SOCIAIS")
print("=" * 70)

artigos = [
    {
        'titulo': 'O efeito da rede social em nosso cotidiano',
        'fonte': 'Brasil Escola',
        'url': 'https://meuartigo.brasilescola.uol.com.br/sociologia/o-efeito-rede-social-nosso-cotidiano.htm',
        'conceitos_chave': [
            'Relacionamentos horizontais',
            'Diminui√ß√£o de hierarquias',
            'Redu√ß√£o de preconceitos',
            'Controle de uso',
            'Depend√™ncia digital'
        ],
        'citacoes': [
            'As redes sociais permitem relacionamentos mais horizontais, diminuindo hierarquias.',
            'O uso descontrolado pode levar a perdas significativas na qualidade de vida.',
            'As redes sociais podem tanto aproximar quanto afastar pessoas.'
        ],
        'impactos_positivos': [
            'Facilidade de comunica√ß√£o',
            'Democratiza√ß√£o da informa√ß√£o',
            'Diminui√ß√£o de hierarquias sociais'
        ],
        'impactos_negativos': [
            'Depend√™ncia digital',
            'Isolamento social f√≠sico',
            'Ansiedade e depress√£o'
        ]
    },
    {
        'titulo': 'Echo Chambers on Social Media: A comparative analysis',
        'fonte': 'arXiv',
        'url': 'https://arxiv.org/abs/2004.09603',
        'conceitos_chave': [
            'C√¢maras de eco',
            'Bolhas informacionais',
            'Polariza√ß√£o',
            'Vi√©s de confirma√ß√£o',
            'Algoritmos de recomenda√ß√£o'
        ],
        'citacoes': [
            'Usu√°rios tendem a formar c√¢maras de eco que refor√ßam suas cren√ßas pr√©-existentes.',
            'A exposi√ß√£o limitada a perspectivas diversas reduz a compreens√£o de diferentes pontos de vista.',
            'Algoritmos de recomenda√ß√£o frequentemente amplificam o efeito de bolha informacional.'
        ],
        'impactos_positivos': [
            'Fortalecimento de comunidades de interesse',
            'Maior engajamento com conte√∫do relevante'
        ],
        'impactos_negativos': [
            'Polariza√ß√£o social e pol√≠tica',
            'Desinforma√ß√£o e fake news',
            'Radicaliza√ß√£o de opini√µes',
            'Fragmenta√ß√£o social'
        ]
    },
    {
        'titulo': 'Sociedade em rede',
        'fonte': 'Wikipedia',
        'url': 'https://pt.wikipedia.org/wiki/Sociedade_em_rede',
        'conceitos_chave': [
            'Ciberespa√ßo',
            'Comunica√ß√£o mediada',
            'Intera√ß√µes digitais',
            'Reorganiza√ß√£o social',
            'Capital informacional'
        ],
        'citacoes': [
            'A sociedade em rede reorganiza as estruturas sociais tradicionais atrav√©s da media√ß√£o tecnol√≥gica.',
            'O ciberespa√ßo se torna um novo territ√≥rio para intera√ß√µes humanas significativas.',
            'A comunica√ß√£o mediada por tecnologia cria novas formas de capital social e cultural.'
        ],
        'impactos_positivos': [
            'Novas formas de organiza√ß√£o social',
            'Democratiza√ß√£o do conhecimento',
            'Supera√ß√£o de barreiras geogr√°ficas'
        ],
        'impactos_negativos': [
            'Exclus√£o digital',
            'Vigil√¢ncia e controle',
            'Perda de privacidade'
        ]
    },
    {
        'titulo': 'Da Rede para a Sociedade',
        'fonte': 'Eumed',
        'url': 'https://www.eumed.net/rev/cccss/2017/01/redes.html',
        'conceitos_chave': [
            'Influ√™ncia pol√≠tica',
            'Transforma√ß√£o de rela√ß√µes',
            'Mobiliza√ß√£o social',
            'Ativismo digital',
            'Novas sociabilidades'
        ],
        'citacoes': [
            'As redes sociais transformaram fundamentalmente como nos organizamos politicamente.',
            'O ativismo digital criou novas formas de mobiliza√ß√£o social n√£o poss√≠veis anteriormente.',
            'As rela√ß√µes interpessoais s√£o cada vez mais mediadas e transformadas por plataformas digitais.'
        ],
        'impactos_positivos': [
            'Mobiliza√ß√£o social facilitada',
            'Novas formas de participa√ß√£o pol√≠tica',
            'Amplia√ß√£o de vozes marginalizadas'
        ],
        'impactos_negativos': [
            'Superficialidade nas rela√ß√µes',
            'Manipula√ß√£o pol√≠tica',
            'Vigil√¢ncia e controle social'
        ]
    }
]

# Exibir informa√ß√µes sobre os artigos
print("\nArtigos analisados:")
for i, artigo in enumerate(artigos, 1):
    print(f"{i}. {artigo['titulo']} ({artigo['fonte']})")

# Extrair todos os conceitos-chave
todos_conceitos = []
for artigo in artigos:
    todos_conceitos.extend(artigo['conceitos_chave'])

# Contar frequ√™ncia dos conceitos
conceito_counts = Counter(todos_conceitos)

print("\n\nAN√ÅLISE 1: CONCEITOS-CHAVE NO IMPACTO SOCIAL DAS REDES SOCIAIS")
print("=" * 70)
print("Principais conceitos identificados na literatura:")

for conceito, count in conceito_counts.most_common(10):
    print(f" - {conceito}: mencionado em {count} artigos")

# Extrair impactos positivos e negativos
todos_impactos_positivos = []
todos_impactos_negativos = []

for artigo in artigos:
    todos_impactos_positivos.extend(artigo['impactos_positivos'])
    todos_impactos_negativos.extend(artigo['impactos_negativos'])

# Contar frequ√™ncia dos impactos
impactos_positivos_counts = Counter(todos_impactos_positivos)
impactos_negativos_counts = Counter(todos_impactos_negativos)

print("\n\nAN√ÅLISE 2: IMPACTOS POSITIVOS E NEGATIVOS DAS REDES SOCIAIS")
print("=" * 70)

print("\nImpactos Positivos mais citados:")
for impacto, count in impactos_positivos_counts.most_common(5):
    print(f" - {impacto}: mencionado {count} vezes")

print("\nImpactos Negativos mais citados:")
for impacto, count in impactos_negativos_counts.most_common(5):
    print(f" - {impacto}: mencionado {count} vezes")

# Visualizar compara√ß√£o entre impactos positivos e negativos
impactos_positivos_df = pd.DataFrame(impactos_positivos_counts.most_common(5), 
                                    columns=['Impacto', 'Frequ√™ncia'])
impactos_positivos_df['Tipo'] = 'Positivo'

impactos_negativos_df = pd.DataFrame(impactos_negativos_counts.most_common(5), 
                                    columns=['Impacto', 'Frequ√™ncia'])
impactos_negativos_df['Tipo'] = 'Negativo'

impactos_df = pd.concat([impactos_positivos_df, impactos_negativos_df])

plt.figure(figsize=(12, 8))
colors = {'Positivo': 'green', 'Negativo': 'red'}
ax = sns.barplot(x='Frequ√™ncia', y='Impacto', hue='Tipo', data=impactos_df, palette=colors)
plt.title('Impactos Positivos vs. Negativos das Redes Sociais', fontsize=16)
plt.xlabel('Frequ√™ncia nas Fontes Analisadas', fontsize=12)
plt.ylabel('Tipo de Impacto', fontsize=12)
plt.tight_layout()
plt.savefig('impactos_redes_sociais.png')
plt.close()

print("\nGr√°fico de impactos positivos vs. negativos gerado com sucesso!")

# SIMULA√á√ÉO DE CEN√ÅRIO SOCIALDIVE
print("\n\nüîÆ SIMULA√á√ÉO DE CEN√ÅRIO FUTURO: SOCIEDADE BASEADA EM PONTUA√á√ÉO SOCIAL")
print("=" * 70)
print("Inspirado no epis√≥dio 'Nosedive' de Black Mirror e nos artigos analisados")

# Par√¢metros da simula√ß√£o
n_pessoas = 1000
n_interacoes = 5000
n_dias = 365

# Criar popula√ß√£o inicial com caracter√≠sticas diversas
np.random.seed(42)  # Para reprodutibilidade

# Caracter√≠sticas das pessoas
populacao = pd.DataFrame({
    'id': range(1, n_pessoas + 1),
    'pontuacao_inicial': np.random.normal(3.5, 0.8, n_pessoas).clip(1, 5),  # Pontua√ß√£o entre 1-5
    'classe_socioeconomica': np.random.choice(['Baixa', 'M√©dia', 'Alta'], size=n_pessoas, p=[0.3, 0.5, 0.2]),
    'nivel_educacional': np.random.choice(['Fundamental', 'M√©dio', 'Superior', 'P√≥s-gradua√ß√£o'], 
                                         size=n_pessoas, p=[0.2, 0.4, 0.3, 0.1]),
    'idade': np.random.randint(18, 80, n_pessoas),
    'conformidade_social': np.random.normal(0.7, 0.2, n_pessoas).clip(0, 1),  # Tend√™ncia a seguir normas sociais
    'autenticidade': np.random.normal(0.5, 0.2, n_pessoas).clip(0, 1),  # Tend√™ncia a ser aut√™ntico vs. fake
    'acesso_tecnologia': np.random.normal(0.8, 0.15, n_pessoas).clip(0.3, 1)  # N√≠vel de acesso √† tecnologia
})

# Definir pontua√ß√£o inicial baseada em fatores socioecon√¥micos (simulando desigualdade digital)
# Classe socioecon√¥mica influencia a pontua√ß√£o inicial
class_bonus = {'Baixa': -0.5, 'M√©dia': 0, 'Alta': 0.5}
populacao['pontuacao_inicial'] += populacao['classe_socioeconomica'].map(class_bonus)

# N√≠vel educacional influencia a pontua√ß√£o inicial
edu_bonus = {'Fundamental': -0.3, 'M√©dio': -0.1, 'Superior': 0.2, 'P√≥s-gradua√ß√£o': 0.4}
populacao['pontuacao_inicial'] += populacao['nivel_educacional'].map(edu_bonus)

# Acesso √† tecnologia influencia a pontua√ß√£o inicial
populacao['pontuacao_inicial'] += (populacao['acesso_tecnologia'] - 0.5) * 0.5

# Garantir que a pontua√ß√£o esteja entre 1 e 5
populacao['pontuacao_inicial'] = populacao['pontuacao_inicial'].clip(1, 5)
populacao['pontuacao_atual'] = populacao['pontuacao_inicial'].copy()

# Simular evolu√ß√£o da pontua√ß√£o ao longo do tempo
print("\nSimulando evolu√ß√£o da pontua√ß√£o social ao longo de 1 ano...")

# Criar matriz para armazenar pontua√ß√µes ao longo do tempo
pontuacoes_tempo = np.zeros((n_pessoas, n_dias))
pontuacoes_tempo[:, 0] = populacao['pontuacao_atual'].values

# Par√¢metros que influenciam a evolu√ß√£o da pontua√ß√£o
# Baseados nos conceitos dos artigos
parametros = {
    'peso_conformidade': 0.3,  # Quanto a conformidade social influencia a pontua√ß√£o
    'peso_autenticidade': -0.1,  # Autenticidade pode reduzir pontua√ß√£o (sistema valoriza conformidade)
    'peso_classe': 0.2,  # Influ√™ncia da classe socioecon√¥mica
    'peso_educacao': 0.15,  # Influ√™ncia do n√≠vel educacional
    'peso_acesso_tecnologia': 0.25,  # Influ√™ncia do acesso √† tecnologia
    'volatilidade': 0.1,  # Quanto a pontua√ß√£o pode variar aleatoriamente
    'momentum': 0.8,  # Quanto a tend√™ncia atual influencia a futura (efeito Mateus)
    'polarizacao': 0.05  # Tend√™ncia de pontua√ß√µes extremas se distanciarem mais
}

# Simular evolu√ß√£o di√°ria
for dia in range(1, n_dias):
    # Fator aleat√≥rio (eventos di√°rios, intera√ß√µes)
    fator_aleatorio = np.random.normal(0, parametros['volatilidade'], n_pessoas)
    
    # Fator de conformidade (pessoas conformes tendem a ganhar pontos)
    fator_conformidade = populacao['conformidade_social'] * parametros['peso_conformidade']
    
    # Fator de autenticidade (pode reduzir pontos em um sistema que valoriza conformidade)
    fator_autenticidade = populacao['autenticidade'] * parametros['peso_autenticidade']
    
    # Fator socioecon√¥mico (classe social influencia oportunidades de pontua√ß√£o)
    fator_classe = pd.get_dummies(populacao['classe_socioeconomica'])
    fator_classe = fator_classe['Alta'] * 0.1 - fator_classe['Baixa'] * 0.1
    fator_classe *= parametros['peso_classe']
    
    # Fator educacional
    fator_educacao = pd.get_dummies(populacao['nivel_educacional'])
    fator_educacao = (fator_educacao['Superior'] * 0.05 + 
                      fator_educacao['P√≥s-gradua√ß√£o'] * 0.1 - 
                      fator_educacao['Fundamental'] * 0.05)
    fator_educacao *= parametros['peso_educacao']
    
    # Fator de acesso √† tecnologia
    fator_tecnologia = (populacao['acesso_tecnologia'] - 0.5) * parametros['peso_acesso_tecnologia']
    
    # Efeito Mateus (rico fica mais rico, pobre fica mais pobre)
    pontuacao_atual = pontuacoes_tempo[:, dia-1]
    fator_momentum = (pontuacao_atual - 3) * 0.01 * parametros['momentum']
    
    # Efeito de polariza√ß√£o (pontua√ß√µes extremas tendem a se distanciar mais)
    fator_polarizacao = np.abs(pontuacao_atual - 3) * np.sign(pontuacao_atual - 3) * parametros['polarizacao']
    
    # Calcular nova pontua√ß√£o
    nova_pontuacao = (pontuacao_atual + 
                     fator_aleatorio + 
                     fator_conformidade + 
                     fator_autenticidade + 
                     fator_classe + 
                     fator_educacao + 
                     fator_tecnologia + 
                     fator_momentum +
                     fator_polarizacao)
    
    # Garantir que a pontua√ß√£o esteja entre 1 e 5
    nova_pontuacao = np.clip(nova_pontuacao, 1, 5)
    
    # Armazenar pontua√ß√£o
    pontuacoes_tempo[:, dia] = nova_pontuacao

# Atualizar pontua√ß√£o final
populacao['pontuacao_final'] = pontuacoes_tempo[:, -1]
populacao['variacao_pontuacao'] = populacao['pontuacao_final'] - populacao['pontuacao_inicial']

# Classificar em estratos sociais baseados na pontua√ß√£o final
def classificar_estrato(pontuacao):
    if pontuacao >= 4.5:
        return 'Elite Digital'
    elif pontuacao >= 4.0:
        return 'Privilegiado'
    elif pontuacao >= 3.0:
        return 'Cidad√£o Padr√£o'
    elif pontuacao >= 2.0:
        return 'Marginalizado'
    else:
        return 'Exclu√≠do Digital'

populacao['estrato_social'] = populacao['pontuacao_final'].apply(classificar_estrato)

# An√°lise dos resultados da simula√ß√£o
print("\n\nAN√ÅLISE 3: ESTRATIFICA√á√ÉO SOCIAL NO CEN√ÅRIO SOCIALDIVE")
print("=" * 70)

# Distribui√ß√£o dos estratos sociais
estrato_counts = populacao['estrato_social'].value_counts()
print("\nDistribui√ß√£o da popula√ß√£o por estrato social:")
for estrato, count in estrato_counts.items():
    print(f" - {estrato}: {count} pessoas ({count/n_pessoas*100:.1f}%)")

# Visualizar distribui√ß√£o de pontua√ß√£o final
plt.figure(figsize=(10, 6))
sns.histplot(populacao['pontuacao_final'], bins=20, kde=True)
plt.title('Distribui√ß√£o de Pontua√ß√£o Social Final', fontsize=16)
plt.xlabel('Pontua√ß√£o (1-5)', fontsize=12)
plt.ylabel('N√∫mero de Pessoas', fontsize=12)

# Adicionar linhas verticais para os limites dos estratos
plt.axvline(x=4.5, color='red', linestyle='--', alpha=0.7, label='Elite Digital (4.5+)')
plt.axvline(x=4.0, color='orange', linestyle='--', alpha=0.7, label='Privilegiado (4.0-4.5)')
plt.axvline(x=3.0, color='green', linestyle='--', alpha=0.7, label='Cidad√£o Padr√£o (3.0-4.0)')
plt.axvline(x=2.0, color='blue', linestyle='--', alpha=0.7, label='Marginalizado (2.0-3.0)')
plt.legend()
plt.tight_layout()
plt.savefig('distribuicao_pontuacao_final.png')
plt.close()

# Analisar rela√ß√£o entre classe socioecon√¥mica inicial e estrato social final
cross_tab = pd.crosstab(populacao['classe_socioeconomica'], 
                        populacao['estrato_social'], 
                        normalize='index') * 100

print("\nRela√ß√£o entre classe socioecon√¥mica inicial e estrato social final (%):")
print(cross_tab.round(1))

# Visualizar a rela√ß√£o entre classe socioecon√¥mica e estrato social
plt.figure(figsize=(12, 8))
cross_tab.plot(kind='bar', stacked=True, colormap='viridis')
plt.title('Estrato Social Digital por Classe Socioecon√¥mica', fontsize=16)
plt.xlabel('Classe Socioecon√¥mica', fontsize=12)
plt.ylabel('Percentual (%)', fontsize=12)
plt.legend(title='Estrato Social Digital')
plt.tight_layout()
plt.savefig('classe_vs_estrato.png')
plt.close()

# Analisar evolu√ß√£o da pontua√ß√£o m√©dia por classe socioecon√¥mica
pontuacoes_por_classe = {}
classes = populacao['classe_socioeconomica'].unique()

for classe in classes:
    indices = populacao[populacao['classe_socioeconomica'] == classe].index
    pontuacoes_por_classe[classe] = pontuacoes_tempo[indices].mean(axis=0)

# Visualizar evolu√ß√£o temporal da pontua√ß√£o por classe
plt.figure(figsize=(12, 6))
for classe, pontuacoes in pontuacoes_por_classe.items():
    plt.plot(range(n_dias), pontuacoes, label=f'Classe {classe}')

plt.title('Evolu√ß√£o da Pontua√ß√£o Social M√©dia por Classe Socioecon√¥mica', fontsize=16)
plt.xlabel('Dias', fontsize=12)
plt.ylabel('Pontua√ß√£o M√©dia (1-5)', fontsize=12)
plt.legend()
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.savefig('evolucao_pontuacao_por_classe.png')
plt.close()

print("\nGr√°ficos de estratifica√ß√£o social gerados com sucesso!")

# An√°lise de mobilidade social
print("\n\nAN√ÅLISE 4: MOBILIDADE SOCIAL NO CEN√ÅRIO SOCIALDIVE")
print("=" * 70)

# Definir mobilidade como a varia√ß√£o na pontua√ß√£o
populacao['mobilidade'] = populacao['variacao_pontuacao']

# Estat√≠sticas de mobilidade por classe
mobilidade_por_classe = populacao.groupby('classe_socioeconomica')['mobilidade'].agg(['mean', 'std', 'min', 'max'])
print("\nMobilidade social por classe socioecon√¥mica:")
print(mobilidade_por_classe.round(2))

# Visualizar mobilidade por classe
plt.figure(figsize=(10, 6))
sns.boxplot(x='classe_socioeconomica', y='mobilidade', data=populacao, palette='viridis')
plt.title('Mobilidade Social por Classe Socioecon√¥mica', fontsize=16)
plt.xlabel('Classe Socioecon√¥mica', fontsize=12)
plt.ylabel('Varia√ß√£o na Pontua√ß√£o Social', fontsize=12)
plt.axhline(y=0, color='red', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig('mobilidade_por_classe.png')
plt.close()

# An√°lise de fatores que influenciam a mobilidade
print("\n\nAN√ÅLISE 5: FATORES QUE INFLUENCIAM A MOBILIDADE SOCIAL")
print("=" * 70)

# Calcular correla√ß√µes entre caracter√≠sticas e mobilidade
correlacoes = populacao[['idade', 'conformidade_social', 'autenticidade', 
                         'acesso_tecnologia', 'pontuacao_inicial', 'mobilidade']].corr()['mobilidade'].sort_values()

print("\nCorrela√ß√£o entre caracter√≠sticas e mobilidade social:")
for caracteristica, corr in correlacoes.items():
    if caracteristica != 'mobilidade':
        print(f" - {caracteristica}: {corr:.3f}")

# Visualizar correla√ß√µes
plt.figure(figsize=(10, 6))
correlacoes = correlacoes.drop('mobilidade')
sns.barplot(x=correlacoes.values, y=correlacoes.index, palette='RdBu_r')
plt.title('Fatores que Influenciam a Mobilidade Social', fontsize=16)
plt.xlabel('Correla√ß√£o com Mobilidade Social', fontsize=12)
plt.axvline(x=0, color='black', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig('fatores_mobilidade.png')
plt.close()

# Simula√ß√£o de rede social
print("\n\nAN√ÅLISE 6: SIMULA√á√ÉO DE REDE SOCIAL E FORMA√á√ÉO DE BOLHAS")
print("=" * 70)
print("Simulando forma√ß√£o de conex√µes e bolhas sociais baseadas em pontua√ß√£o...")

# Criar grafo de rede social
G = nx.Graph()

# Adicionar n√≥s (pessoas)
for idx, row in populacao.iterrows():
    G.add_node(row['id'], 
               pontuacao=row['pontuacao_final'], 
               estrato=row['estrato_social'],
               classe=row['classe_socioeconomica'])

# Fun√ß√£o para determinar probabilidade de conex√£o baseada em pontua√ß√µes
def prob_conexao(p1, p2, homofilia=0.7):
    # Diferen√ßa de pontua√ß√£o
    diff = abs(p1 - p2)
    # Probabilidade base (quanto menor a diferen√ßa, maior a probabilidade)
    prob_base = max(0, 1 - (diff / 4) * homofilia)
    return prob_base

# Adicionar arestas (conex√µes)
# Pessoas tendem a se conectar com outras de pontua√ß√£o similar (homofilia)
n_conexoes = min(20000, n_pessoas * 20)  # Limitar n√∫mero de conex√µes para visualiza√ß√£o
conexoes_realizadas = 0

while conexoes_realizadas < n_conexoes:
    # Selecionar duas pessoas aleat√≥rias
    p1 = np.random.randint(1, n_pessoas + 1)
    p2 = np.random.randint(1, n_pessoas + 1)
    
    if p1 != p2 and not G.has_edge(p1, p2):
        # Obter pontua√ß√µes
        p1_score = populacao.loc[populacao['id'] == p1, 'pontuacao_final'].values[0]
        p2_score = populacao.loc[populacao['id'] == p2, 'pontuacao_final'].values[0]
        
        # Calcular probabilidade de conex√£o
        prob = prob_conexao(p1_score, p2_score)
        
        # Decidir se conecta
        if np.random.random() < prob:
            G.add_edge(p1, p2)
            conexoes_realizadas += 1

print(f"\nRede social simulada com {G.number_of_nodes()} pessoas e {G.number_of_edges()} conex√µes.")

# Detectar comunidades na rede
try:
    from community import best_partition
    partition = best_partition(G)
    nx.set_node_attributes(G, partition, 'community')
    
    # Contar n√∫mero de comunidades
    n_communities = len(set(partition.values()))
    print(f"Detectadas {n_communities} comunidades distintas na rede social.")
    
    # Analisar homogeneidade das comunidades
    community_scores = {}
    for community in set(partition.values()):
        nodes_in_community = [node for node in G.nodes() if partition[node] == community]
        scores = [G.nodes[node]['pontuacao'] for node in nodes_in_community]
        community_scores[community] = {
            'size': len(nodes_in_community),
            'mean_score': np.mean(scores),
            'std_score': np.std(scores)
        }
    
    # Ordenar comunidades por tamanho
    sorted_communities = sorted(community_scores.items(), key=lambda x: x[1]['size'], reverse=True)
    
    print("\nAn√°lise das 5 maiores comunidades:")
    for i, (comm, stats) in enumerate(sorted_communities[:5], 1):
        print(f"Comunidade {i}: {stats['size']} membros, pontua√ß√£o m√©dia: {stats['mean_score']:.2f} ¬± {stats['std_score']:.2f}")
    
except ImportError:
    print("Biblioteca 'community' n√£o dispon√≠vel. An√°lise de comunidades n√£o realizada.")
    # Alternativa: usar algoritmo de clustering
    # Extrair matriz de adjac√™ncia
    adj_matrix = nx.to_numpy_array(G)
    # Aplicar K-means
    kmeans = KMeans(n_clusters=5, random_state=42)
    # Usar as primeiras 2 componentes principais para clustering
    clusters = kmeans.fit_predict(adj_matrix[:, :2])
    # Atribuir clusters aos n√≥s
    for i, node in enumerate(G.nodes()):
        G.nodes[node]['community'] = int(clusters[i])
    
    print("An√°lise alternativa: agrupamento de n√≥s em 5 clusters.")

# CONCLUS√ïES E IMPLICA√á√ïES SOCIAIS
print("\n\nüìù CONCLUS√ïES E IMPLICA√á√ïES SOCIAIS")
print("=" * 70)

# Conclus√µes baseadas nos artigos e na simula√ß√£o
conclusoes = [
    "A estratifica√ß√£o social digital tende a reproduzir e amplificar desigualdades socioecon√¥micas existentes.",
    "O acesso √† tecnologia e o n√≠vel educacional s√£o fatores determinantes para a mobilidade social em um sistema de pontua√ß√£o.",
    "Pessoas com maior conformidade social tendem a se beneficiar mais em sistemas de pontua√ß√£o, enquanto a autenticidade pode ser penalizada.",
    "A forma√ß√£o de bolhas sociais (c√¢maras de eco) √© um fen√¥meno natural em redes baseadas em pontua√ß√£o, refor√ßando a polariza√ß√£o.",
    "O 'Efeito Mateus' digital (rico fica mais rico, pobre fica mais pobre) √© observado na evolu√ß√£o das pontua√ß√µes ao longo do tempo.",
    "A mobilidade social ascendente √© mais dif√≠cil para classes socioecon√¥micas mais baixas, criando um ciclo de exclus√£o digital."
]

for i, conclusao in enumerate(conclusoes, 1):
    print(f"{i}. {conclusao}")

# Implica√ß√µes √©ticas e sociais
print("\nImplica√ß√µes √©ticas e sociais de um sistema de pontua√ß√£o social:")
implicacoes = [
    "Eros√£o da privacidade: sistemas de pontua√ß√£o social requerem vigil√¢ncia constante das a√ß√µes individuais.",
    "Conformismo excessivo: pessoas podem sacrificar autenticidade e pensamento cr√≠tico para maximizar pontua√ß√£o.",
    "Discrimina√ß√£o algor√≠tmica: vieses nos algoritmos podem perpetuar e amplificar desigualdades existentes.",
    "Exclus√£o digital: pessoas sem acesso adequado √† tecnologia ficam cada vez mais marginalizadas.",
    "Sa√∫de mental: ansiedade, depress√£o e outros problemas podem surgir da press√£o constante por aprova√ß√£o social.",
    "Manipula√ß√£o comportamental: o sistema pode ser usado como ferramenta de controle social e pol√≠tico."
]

for i, implicacao in enumerate(implicacoes, 1):
    print(f"{i}. {implicacao}")

# Recomenda√ß√µes para mitigar impactos negativos
print("\nRecomenda√ß√µes para mitigar impactos negativos:")
recomendacoes = [
    "Pol√≠ticas de inclus√£o digital para garantir acesso equitativo √† tecnologia.",
    "Transpar√™ncia algor√≠tmica para permitir auditoria e corre√ß√£o de vieses.",
    "Educa√ß√£o digital cr√≠tica para promover uso consciente das redes sociais.",
    "Regulamenta√ß√£o para proteger privacidade e prevenir discrimina√ß√£o.",
    "Valoriza√ß√£o da diversidade de pensamento e express√£o aut√™ntica nas plataformas digitais.",
    "Desenvolvimento de m√©tricas de valor social que v√£o al√©m de likes e compartilhamentos."
]

for i, recomendacao in enumerate(recomendacoes, 1):
    print(f"{i}. {recomendacao}")

print("\n‚úÖ An√°lise conclu√≠da! Todos os gr√°ficos foram gerados.")